# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
#   pull_request:
#     branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with: 
          java-version: '11'

      - name: Find and Replace DB URL
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "jdbc:postgresql://localhost:5432/journaldb"
          replace: ${{ secrets.DB_HOST }}
          include: "src/main/resources/application.yaml"

      - name: Find and Replace DB USERNAME
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "rh"
          replace: ${{ secrets.DB_USERNAME }}
          include: "src/main/resources/application.yaml"

      - name: Find and Replace DB PASSWORD
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "russianhackers"
          replace: ${{ secrets.DB_PASSWORD }}
          include: "src/main/resources/application.yaml"

      - name: Build with MVN
        env:
          APP_DATASOURCE_JDBC-URL: ${{ secrets.DB_HOST }}
          APP_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          APP_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          APP_JWT_SECRETKEY: ${{ secrets.JWT_SECRET_KEY }}
        run: mvn -B clean package --file pom.xml

      - name: Dockerize
        run: docker build -t journalapp:latest .
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate to ECR
        run: >
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} |
          docker login --username AWS
          --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Tag Image
        run: >
          docker tag journalapp
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPO }}

      - name: Push to ECR
        run: >
          docker push
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPO }}